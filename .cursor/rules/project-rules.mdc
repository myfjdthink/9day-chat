---
description: 项目开发与迁移规则
globs: **/*.ts, **/*.js, api/**/*
alwaysApply: true
---

# 项目开发与迁移规则

> 本规则文件适用于整个项目，涵盖 API 迁移、变更管理、Vue3+TypeScript+Tailwind 最佳实践等内容。请所有开发成员遵循。

## 一、API 迁移与变更管理

### 核心原则
- 最小化现有代码改动
- 遵循 API 一对一映射原则
- 保持简洁的沟通风格
- 重大修改需要确认

### 变更管理
- 实施增量式变更
- 避免未经批准的大规模修改
- 保持修改的独立性和聚焦性
- 系统性记录所有变更
- 实施前验证变更
- 独立测试修改内容

### API 映射规则
- 保持单一端点关注
- 多端点变更需要审批
- 确保向后兼容性
- 遵循一致的命名规范
- 记录 API 依赖关系
- 验证请求/响应结构

### 沟通协议
- 使用清晰简洁的回复
- 避免信息冗余
- 提供结构化反馈
- 记录关键决策
- 维护变更历史
- 高效共享进度更新

### 验证规则
- 单独测试修改的端点
- 验证数据一致性
- 确保错误处理
- 检查性能影响
- 验证安全影响
- 确认集成稳定性

### 确认要求
- 大规模修改
- 多端点变更
- 破坏性变更
- 安全敏感更新
- 性能关键修改
- 影响集成的变更

---

## 二、Vue3 + TypeScript + Tailwind 最佳实践

> 本节内容适用于所有 Vue3 相关开发，强调类型安全、样式规范、注释与调试等。

### 1. 组件开发规范
- 优先使用 Composition API，保持组件小巧、职责单一。
- 组件 props、emit、类型推断要完整，推荐使用 TypeScript。
- 复用逻辑请封装为 composable。
- 组件内逻辑、样式、模板分区清晰，注释充分。

### 2. TypeScript 类型安全
- 严格区分消息类型（如 user/assistant/report），涉及联合类型时，优先用类型保护函数（type guard）过滤，避免类型推断错误。
- 过滤数组后如需类型收窄，推荐写 type guard 函数而非直接断言。

### 3. Tailwind CSS 使用
- 推荐直接写原生 CSS 替代 @apply，避免 PostCSS 配置不当导致的警告。
- 如需用 @apply，确保 postcss.config.js 配置正确，并已引入 tailwindcss、autoprefixer 插件。
- 复杂样式建议写在 style 标签内，注释标明对应 Tailwind 类名。

### 4. 代码注释与日志
- 关键逻辑、类型保护、样式覆盖等地方必须有中文注释。
- 输出日志要简洁明了，便于调试。

### 5. 变更与调试建议
- 任何类型相关报错，优先检查联合类型、类型保护、作用域。
- 任何样式相关警告，优先检查 @apply、Tailwind 配置、PostCSS 配置。
- 变更需最小化影响范围，避免大规模重构。

### 6. 依赖与配置
- postcss.config.js 必须包含 tailwindcss 和 autoprefixer。
- tailwind.config.js 的 content 字段需覆盖 src、components、pages 等所有 Vue/TS 文件。

### 7. 其他
- 遵循 Vue 官方风格指南和 Tailwind 官方最佳实践。
- 代码风格、命名、注释保持一致。


## 三、全局UI组件复用规范

- 所有全局UI组件（如按钮、输入框、卡片、复选框等）必须统一使用 src/components/ui/ 目录下的 Button.vue、Input.vue、Card.vue、CardContent.vue、Checkbox.vue 等组件，不允许在项目中重复造轮子或自定义实现类似功能。
- 所有页面和业务组件如需按钮、输入框等，必须直接引用@/ui目录下的对应组件。