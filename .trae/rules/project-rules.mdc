---
description: Trae AI 项目开发与迁移规则
globs: **/*.ts, **/*.js, api/**/*
alwaysApply: true
---

# Trae AI 项目开发与迁移规则

> 本规则文件适用于整个项目，涵盖 API 迁移、变更管理、Vue3+TypeScript+Tailwind 最佳实践等内容。请所有开发成员遵循。

## 一、API 迁移与变更管理

### 核心原则
- 最小化现有代码改动
- 遵循 API 一对一映射原则
- 保持简洁的沟通风格
- 重大修改需要确认
- 优先考虑向后兼容性
- 遵循渐进式增强原则

### 变更管理
- 实施增量式变更
- 避免未经批准的大规模修改
- 保持修改的独立性和聚焦性
- 系统性记录所有变更
- 实施前验证变更
- 独立测试修改内容
- 使用版本控制追踪变更历史

### API 映射规则
- 保持单一端点关注
- 多端点变更需要审批
- 确保向后兼容性
- 遵循一致的命名规范
- 记录 API 依赖关系
- 验证请求/响应结构
- 实施适当的错误处理

### 沟通协议
- 使用清晰简洁的回复
- 避免信息冗余
- 提供结构化反馈
- 记录关键决策
- 维护变更历史
- 高效共享进度更新
- 及时同步团队状态

### 验证规则
- 单独测试修改的端点
- 验证数据一致性
- 确保错误处理
- 检查性能影响
- 验证安全影响
- 确认集成稳定性
- 执行回归测试

### 确认要求
- 大规模修改
- 多端点变更
- 破坏性变更
- 安全敏感更新
- 性能关键修改
- 影响集成的变更
- 数据库结构变更

---

## 二、代码质量与架构规范

### 代码风格和结构
- 编写简洁且技术性强的代码，并提供准确的示例
- 使用组合API和声明式编程模式；避免使用选项API
- 优先使用迭代和模块化，避免代码重复
- 使用描述性变量名，添加辅助动词（如：isLoading, hasError）
- 文件结构：导出组件、可组合项、帮助函数、静态内容、类型

### 命名约定
- 目录使用小写和短横线（如：components/auth-wizard）
- 组件名称使用PascalCase（如：AuthWizard.vue）
- 可组合项使用camelCase（如：useAuthState.ts）
- 常量使用UPPER_SNAKE_CASE
- 函数和变量使用camelCase

### TypeScript使用
- 所有代码使用TypeScript；优先使用类型而非接口
- 避免使用枚举；使用常量对象
- 使用Vue 3的TypeScript，利用defineComponent和PropType
- 严格区分消息类型，使用类型保护函数（type guard）
- 避免使用any类型，优先使用unknown或具体类型

### 语法和格式
- 方法和计算属性使用箭头函数
- 在条件语句中避免不必要的大括号；对于简单语句使用简洁语法
- 使用模板语法进行声明式渲染
- 保持一致的缩进和格式化

---

## 三、性能优化与最佳实践

### 性能优化
- 利用框架的内置性能优化
- 对异步组件使用Suspense
- 实现路由和组件的懒加载
- 优化图片：使用WebP格式，包含尺寸数据，实现懒加载
- 使用虚拟滚动处理大列表
- 实施代码分割和按需加载

### 关键约定
- 使用VueUse进行常用可组合项和实用函数
- 使用Pinia进行状态管理
- 优化Web Vitals（LCP, CLS, FID）
- 利用自动导入功能
- 实施适当的缓存策略

### 安全规范
- 输入验证和清理
- 防止XSS攻击
- 安全的API调用
- 敏感数据保护
- 适当的权限控制

---

## 四、测试与部署规范

### 测试策略
- 编写单元测试覆盖核心逻辑
- 实施集成测试验证API交互
- 执行端到端测试确保用户流程
- 维护测试覆盖率在80%以上
- 使用测试驱动开发（TDD）方法

### 部署流程
- 使用CI/CD自动化部署
- 实施蓝绿部署或滚动更新
- 监控应用性能和错误
- 建立回滚机制
- 维护部署文档

### 监控与日志
- 实施应用性能监控（APM）
- 建立错误追踪和报警
- 记录关键业务指标
- 定期审查日志和指标
- 建立故障响应流程

---

## 五、文档与协作规范

### 文档要求
- 维护API文档的实时更新
- 编写清晰的代码注释
- 提供组件使用示例
- 记录架构决策和变更
- 维护部署和运维文档

### 协作流程
- 使用Git Flow或GitHub Flow
- 执行代码审查（Code Review）
- 遵循提交信息规范
- 及时同步团队进展
- 建立知识分享机制

### 分支管理规范
- 所有代码推送必须使用 “water+分支更新” 的命名方式对分支进行提交
- 禁止直接推送到主分支（main/master）
- 所有更改必须通过 Pull Request 提交
- 需要等待主分支管理员审核和合并
- 分支命名规范：water/feature-name 或 water/fix-name
- 分支创建前需要同步最新的主分支代码

### 版本管理
- 遵循语义化版本控制
- 维护变更日志（CHANGELOG）
- 标记重要的里程碑版本
- 建立版本发布流程
- 管理依赖版本兼容性